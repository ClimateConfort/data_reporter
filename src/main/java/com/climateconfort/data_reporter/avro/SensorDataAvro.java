/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.climateconfort.data_reporter.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SensorDataAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 803454075296610859L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorDataAvro\",\"namespace\":\"com.climateconfort.data_reporter.avro\",\"doc\":\"\",\"fields\":[{\"name\":\"unixTime\",\"type\":\"long\",\"doc\":\"Unix Timestamp\"},{\"name\":\"roomId\",\"type\":\"long\",\"doc\":\"Room identification\"},{\"name\":\"buildingId\",\"type\":\"long\",\"doc\":\"Building identification\"},{\"name\":\"clientId\",\"type\":\"long\",\"doc\":\"Client identification\"},{\"name\":\"temperature\",\"type\":\"float\",\"doc\":\"Room temperature in ºC\"},{\"name\":\"soundLevel\",\"type\":\"float\",\"doc\":\"Room sound level in decibels\"},{\"name\":\"humidity\",\"type\":\"float\",\"doc\":\"Room humidity in %\"},{\"name\":\"pressure\",\"type\":\"float\",\"doc\":\"Room pressure in hPa\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SensorDataAvro> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SensorDataAvro> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SensorDataAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SensorDataAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SensorDataAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SensorDataAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SensorDataAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SensorDataAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SensorDataAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unix Timestamp */
  private long unixTime;
  /** Room identification */
  private long roomId;
  /** Building identification */
  private long buildingId;
  /** Client identification */
  private long clientId;
  /** Room temperature in ºC */
  private float temperature;
  /** Room sound level in decibels */
  private float soundLevel;
  /** Room humidity in % */
  private float humidity;
  /** Room pressure in hPa */
  private float pressure;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SensorDataAvro() {}

  /**
   * All-args constructor.
   * @param unixTime Unix Timestamp
   * @param roomId Room identification
   * @param buildingId Building identification
   * @param clientId Client identification
   * @param temperature Room temperature in ºC
   * @param soundLevel Room sound level in decibels
   * @param humidity Room humidity in %
   * @param pressure Room pressure in hPa
   */
  public SensorDataAvro(java.lang.Long unixTime, java.lang.Long roomId, java.lang.Long buildingId, java.lang.Long clientId, java.lang.Float temperature, java.lang.Float soundLevel, java.lang.Float humidity, java.lang.Float pressure) {
    this.unixTime = unixTime;
    this.roomId = roomId;
    this.buildingId = buildingId;
    this.clientId = clientId;
    this.temperature = temperature;
    this.soundLevel = soundLevel;
    this.humidity = humidity;
    this.pressure = pressure;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return unixTime;
    case 1: return roomId;
    case 2: return buildingId;
    case 3: return clientId;
    case 4: return temperature;
    case 5: return soundLevel;
    case 6: return humidity;
    case 7: return pressure;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: unixTime = (java.lang.Long)value$; break;
    case 1: roomId = (java.lang.Long)value$; break;
    case 2: buildingId = (java.lang.Long)value$; break;
    case 3: clientId = (java.lang.Long)value$; break;
    case 4: temperature = (java.lang.Float)value$; break;
    case 5: soundLevel = (java.lang.Float)value$; break;
    case 6: humidity = (java.lang.Float)value$; break;
    case 7: pressure = (java.lang.Float)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'unixTime' field.
   * @return Unix Timestamp
   */
  public long getUnixTime() {
    return unixTime;
  }


  /**
   * Sets the value of the 'unixTime' field.
   * Unix Timestamp
   * @param value the value to set.
   */
  public void setUnixTime(long value) {
    this.unixTime = value;
  }

  /**
   * Gets the value of the 'roomId' field.
   * @return Room identification
   */
  public long getRoomId() {
    return roomId;
  }


  /**
   * Sets the value of the 'roomId' field.
   * Room identification
   * @param value the value to set.
   */
  public void setRoomId(long value) {
    this.roomId = value;
  }

  /**
   * Gets the value of the 'buildingId' field.
   * @return Building identification
   */
  public long getBuildingId() {
    return buildingId;
  }


  /**
   * Sets the value of the 'buildingId' field.
   * Building identification
   * @param value the value to set.
   */
  public void setBuildingId(long value) {
    this.buildingId = value;
  }

  /**
   * Gets the value of the 'clientId' field.
   * @return Client identification
   */
  public long getClientId() {
    return clientId;
  }


  /**
   * Sets the value of the 'clientId' field.
   * Client identification
   * @param value the value to set.
   */
  public void setClientId(long value) {
    this.clientId = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return Room temperature in ºC
   */
  public float getTemperature() {
    return temperature;
  }


  /**
   * Sets the value of the 'temperature' field.
   * Room temperature in ºC
   * @param value the value to set.
   */
  public void setTemperature(float value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'soundLevel' field.
   * @return Room sound level in decibels
   */
  public float getSoundLevel() {
    return soundLevel;
  }


  /**
   * Sets the value of the 'soundLevel' field.
   * Room sound level in decibels
   * @param value the value to set.
   */
  public void setSoundLevel(float value) {
    this.soundLevel = value;
  }

  /**
   * Gets the value of the 'humidity' field.
   * @return Room humidity in %
   */
  public float getHumidity() {
    return humidity;
  }


  /**
   * Sets the value of the 'humidity' field.
   * Room humidity in %
   * @param value the value to set.
   */
  public void setHumidity(float value) {
    this.humidity = value;
  }

  /**
   * Gets the value of the 'pressure' field.
   * @return Room pressure in hPa
   */
  public float getPressure() {
    return pressure;
  }


  /**
   * Sets the value of the 'pressure' field.
   * Room pressure in hPa
   * @param value the value to set.
   */
  public void setPressure(float value) {
    this.pressure = value;
  }

  /**
   * Creates a new SensorDataAvro RecordBuilder.
   * @return A new SensorDataAvro RecordBuilder
   */
  public static com.climateconfort.data_reporter.avro.SensorDataAvro.Builder newBuilder() {
    return new com.climateconfort.data_reporter.avro.SensorDataAvro.Builder();
  }

  /**
   * Creates a new SensorDataAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SensorDataAvro RecordBuilder
   */
  public static com.climateconfort.data_reporter.avro.SensorDataAvro.Builder newBuilder(com.climateconfort.data_reporter.avro.SensorDataAvro.Builder other) {
    if (other == null) {
      return new com.climateconfort.data_reporter.avro.SensorDataAvro.Builder();
    } else {
      return new com.climateconfort.data_reporter.avro.SensorDataAvro.Builder(other);
    }
  }

  /**
   * Creates a new SensorDataAvro RecordBuilder by copying an existing SensorDataAvro instance.
   * @param other The existing instance to copy.
   * @return A new SensorDataAvro RecordBuilder
   */
  public static com.climateconfort.data_reporter.avro.SensorDataAvro.Builder newBuilder(com.climateconfort.data_reporter.avro.SensorDataAvro other) {
    if (other == null) {
      return new com.climateconfort.data_reporter.avro.SensorDataAvro.Builder();
    } else {
      return new com.climateconfort.data_reporter.avro.SensorDataAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for SensorDataAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorDataAvro>
    implements org.apache.avro.data.RecordBuilder<SensorDataAvro> {

    /** Unix Timestamp */
    private long unixTime;
    /** Room identification */
    private long roomId;
    /** Building identification */
    private long buildingId;
    /** Client identification */
    private long clientId;
    /** Room temperature in ºC */
    private float temperature;
    /** Room sound level in decibels */
    private float soundLevel;
    /** Room humidity in % */
    private float humidity;
    /** Room pressure in hPa */
    private float pressure;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.climateconfort.data_reporter.avro.SensorDataAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.unixTime)) {
        this.unixTime = data().deepCopy(fields()[0].schema(), other.unixTime);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.roomId)) {
        this.roomId = data().deepCopy(fields()[1].schema(), other.roomId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.buildingId)) {
        this.buildingId = data().deepCopy(fields()[2].schema(), other.buildingId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.clientId)) {
        this.clientId = data().deepCopy(fields()[3].schema(), other.clientId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.temperature)) {
        this.temperature = data().deepCopy(fields()[4].schema(), other.temperature);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.soundLevel)) {
        this.soundLevel = data().deepCopy(fields()[5].schema(), other.soundLevel);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.humidity)) {
        this.humidity = data().deepCopy(fields()[6].schema(), other.humidity);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.pressure)) {
        this.pressure = data().deepCopy(fields()[7].schema(), other.pressure);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing SensorDataAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.climateconfort.data_reporter.avro.SensorDataAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.unixTime)) {
        this.unixTime = data().deepCopy(fields()[0].schema(), other.unixTime);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.roomId)) {
        this.roomId = data().deepCopy(fields()[1].schema(), other.roomId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.buildingId)) {
        this.buildingId = data().deepCopy(fields()[2].schema(), other.buildingId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.clientId)) {
        this.clientId = data().deepCopy(fields()[3].schema(), other.clientId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.temperature)) {
        this.temperature = data().deepCopy(fields()[4].schema(), other.temperature);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.soundLevel)) {
        this.soundLevel = data().deepCopy(fields()[5].schema(), other.soundLevel);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.humidity)) {
        this.humidity = data().deepCopy(fields()[6].schema(), other.humidity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pressure)) {
        this.pressure = data().deepCopy(fields()[7].schema(), other.pressure);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'unixTime' field.
      * Unix Timestamp
      * @return The value.
      */
    public long getUnixTime() {
      return unixTime;
    }


    /**
      * Sets the value of the 'unixTime' field.
      * Unix Timestamp
      * @param value The value of 'unixTime'.
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder setUnixTime(long value) {
      validate(fields()[0], value);
      this.unixTime = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'unixTime' field has been set.
      * Unix Timestamp
      * @return True if the 'unixTime' field has been set, false otherwise.
      */
    public boolean hasUnixTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'unixTime' field.
      * Unix Timestamp
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder clearUnixTime() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'roomId' field.
      * Room identification
      * @return The value.
      */
    public long getRoomId() {
      return roomId;
    }


    /**
      * Sets the value of the 'roomId' field.
      * Room identification
      * @param value The value of 'roomId'.
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder setRoomId(long value) {
      validate(fields()[1], value);
      this.roomId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'roomId' field has been set.
      * Room identification
      * @return True if the 'roomId' field has been set, false otherwise.
      */
    public boolean hasRoomId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'roomId' field.
      * Room identification
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder clearRoomId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'buildingId' field.
      * Building identification
      * @return The value.
      */
    public long getBuildingId() {
      return buildingId;
    }


    /**
      * Sets the value of the 'buildingId' field.
      * Building identification
      * @param value The value of 'buildingId'.
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder setBuildingId(long value) {
      validate(fields()[2], value);
      this.buildingId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'buildingId' field has been set.
      * Building identification
      * @return True if the 'buildingId' field has been set, false otherwise.
      */
    public boolean hasBuildingId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'buildingId' field.
      * Building identification
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder clearBuildingId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'clientId' field.
      * Client identification
      * @return The value.
      */
    public long getClientId() {
      return clientId;
    }


    /**
      * Sets the value of the 'clientId' field.
      * Client identification
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder setClientId(long value) {
      validate(fields()[3], value);
      this.clientId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * Client identification
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'clientId' field.
      * Client identification
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder clearClientId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * Room temperature in ºC
      * @return The value.
      */
    public float getTemperature() {
      return temperature;
    }


    /**
      * Sets the value of the 'temperature' field.
      * Room temperature in ºC
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder setTemperature(float value) {
      validate(fields()[4], value);
      this.temperature = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * Room temperature in ºC
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'temperature' field.
      * Room temperature in ºC
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder clearTemperature() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'soundLevel' field.
      * Room sound level in decibels
      * @return The value.
      */
    public float getSoundLevel() {
      return soundLevel;
    }


    /**
      * Sets the value of the 'soundLevel' field.
      * Room sound level in decibels
      * @param value The value of 'soundLevel'.
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder setSoundLevel(float value) {
      validate(fields()[5], value);
      this.soundLevel = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'soundLevel' field has been set.
      * Room sound level in decibels
      * @return True if the 'soundLevel' field has been set, false otherwise.
      */
    public boolean hasSoundLevel() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'soundLevel' field.
      * Room sound level in decibels
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder clearSoundLevel() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'humidity' field.
      * Room humidity in %
      * @return The value.
      */
    public float getHumidity() {
      return humidity;
    }


    /**
      * Sets the value of the 'humidity' field.
      * Room humidity in %
      * @param value The value of 'humidity'.
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder setHumidity(float value) {
      validate(fields()[6], value);
      this.humidity = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'humidity' field has been set.
      * Room humidity in %
      * @return True if the 'humidity' field has been set, false otherwise.
      */
    public boolean hasHumidity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'humidity' field.
      * Room humidity in %
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder clearHumidity() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'pressure' field.
      * Room pressure in hPa
      * @return The value.
      */
    public float getPressure() {
      return pressure;
    }


    /**
      * Sets the value of the 'pressure' field.
      * Room pressure in hPa
      * @param value The value of 'pressure'.
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder setPressure(float value) {
      validate(fields()[7], value);
      this.pressure = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'pressure' field has been set.
      * Room pressure in hPa
      * @return True if the 'pressure' field has been set, false otherwise.
      */
    public boolean hasPressure() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'pressure' field.
      * Room pressure in hPa
      * @return This builder.
      */
    public com.climateconfort.data_reporter.avro.SensorDataAvro.Builder clearPressure() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SensorDataAvro build() {
      try {
        SensorDataAvro record = new SensorDataAvro();
        record.unixTime = fieldSetFlags()[0] ? this.unixTime : (java.lang.Long) defaultValue(fields()[0]);
        record.roomId = fieldSetFlags()[1] ? this.roomId : (java.lang.Long) defaultValue(fields()[1]);
        record.buildingId = fieldSetFlags()[2] ? this.buildingId : (java.lang.Long) defaultValue(fields()[2]);
        record.clientId = fieldSetFlags()[3] ? this.clientId : (java.lang.Long) defaultValue(fields()[3]);
        record.temperature = fieldSetFlags()[4] ? this.temperature : (java.lang.Float) defaultValue(fields()[4]);
        record.soundLevel = fieldSetFlags()[5] ? this.soundLevel : (java.lang.Float) defaultValue(fields()[5]);
        record.humidity = fieldSetFlags()[6] ? this.humidity : (java.lang.Float) defaultValue(fields()[6]);
        record.pressure = fieldSetFlags()[7] ? this.pressure : (java.lang.Float) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SensorDataAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<SensorDataAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SensorDataAvro>
    READER$ = (org.apache.avro.io.DatumReader<SensorDataAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.unixTime);

    out.writeLong(this.roomId);

    out.writeLong(this.buildingId);

    out.writeLong(this.clientId);

    out.writeFloat(this.temperature);

    out.writeFloat(this.soundLevel);

    out.writeFloat(this.humidity);

    out.writeFloat(this.pressure);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.unixTime = in.readLong();

      this.roomId = in.readLong();

      this.buildingId = in.readLong();

      this.clientId = in.readLong();

      this.temperature = in.readFloat();

      this.soundLevel = in.readFloat();

      this.humidity = in.readFloat();

      this.pressure = in.readFloat();

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.unixTime = in.readLong();
          break;

        case 1:
          this.roomId = in.readLong();
          break;

        case 2:
          this.buildingId = in.readLong();
          break;

        case 3:
          this.clientId = in.readLong();
          break;

        case 4:
          this.temperature = in.readFloat();
          break;

        case 5:
          this.soundLevel = in.readFloat();
          break;

        case 6:
          this.humidity = in.readFloat();
          break;

        case 7:
          this.pressure = in.readFloat();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










